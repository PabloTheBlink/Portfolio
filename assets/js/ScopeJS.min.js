const components={};let ENABLE_DEBUGGER=!1;let UUID_ATTRIBUTE="scopejs-component";export function enableDebugger(bool){ENABLE_DEBUGGER=bool}
function log(...attr){if(!ENABLE_DEBUGGER)return;console.log(...attr)}
function getChildren(element){if(element.tagName.toUpperCase()=="SLOT")return getChildren(element.querySelector("slot"));const cloned_children=[];for(let child of element.children){cloned_children.push(child.cloneNode(!0))}
return cloned_children}
function initFadeIn(){const e=new IntersectionObserver((e)=>{e.forEach((e)=>{e.isIntersecting?e.target.setAttribute("fadeIn","1"):e.target.setAttribute("fadeIn","0")})});document.querySelectorAll("*[fadeIn]").forEach((t)=>{e.observe(t)})}
export function Component({tagName,controller,render,postRender}){const c=new(function Component(){this.render=function(container=document.createElement("div"),children=[]){const uuid=container.getAttribute(UUID_ATTRIBUTE)??(crypto.randomUUID?crypto.randomUUID():Math.random().toString(36).slice(2));function loadLazyImgs(element){if(!element)return;if(element.tagName==="IMG"&&element.hasAttribute("lazy")){(function(){const src=element.getAttribute("src");element.removeAttribute("src");const image=new Image();image.src=src;image.onload=function(){element.setAttribute("src",src);element.removeAttribute("lazy")}})()}
if(element.querySelectorAll)element.querySelectorAll("img[lazy]").forEach(loadLazyImgs);}
function updateDomChildren(container,clone){if(container.getAttribute(UUID_ATTRIBUTE)&&container.getAttribute(UUID_ATTRIBUTE)!=uuid)return;const originalChildren=container.childNodes;const updatedChildren=clone.childNodes;const maxLength=Math.max(originalChildren.length,updatedChildren.length);let style=document.querySelector("style[scopejs]");if(!style){style=document.createElement("style");style.setAttribute("scopejs","1");style.innerHTML=`@keyframes lazy-loading { 0% { background-position: 100% 50%; } 100% { background-position: 0 50%; } } img[lazy] { position: relative; } img[lazy]::after { content: ''; position: absolute; top: 0; left: 0; width: 100%; height: 100%; background: linear-gradient(90deg, #eee 25%, #e3e3e3 50%, #eee 75%); background-size: 400% 400%; animation: lazy-loading 0.5s ease infinite; } ::view-transition-old(*), ::view-transition-new(*) { animation-timing-function: ease-in-out; animation-duration: 0.25s; } @keyframes fadeIn { from { opacity: 0; transform: translateY(2.5rem); } to { opacity: 1; transform: translateY(0); } } *[fadeIn] { opacity: 0; transform: translateY(2.5rem); transition: 0.5s; } *[fadeIn='1'] { opacity: 1; transform: translateY(0); }`;document.head.appendChild(style)}
for(let i=0;i<maxLength;i++){const updatedChild=updatedChildren[i];if(!updatedChild)continue;if(!updatedChild.hasAttribute||!updatedChild.hasAttribute("id"))continue;const id=updatedChild.getAttribute("id");if(style.innerHTML.includes(`#${id}`))continue;style.innerHTML+=`#${id} { view-transition-name: ${id}; } ::view-transition-group(${id}) { animation-timing-function: cubic-bezier(0.22, 1, 0.36, 1); animation-duration: 0.5s; }`}
for(let i=0;i<maxLength;i++){const originalChild=originalChildren[i];const updatedChild=updatedChildren[i];if(!originalChild&&updatedChild){const newElement=updatedChild.cloneNode(!0);loadLazyImgs(newElement);container.appendChild(newElement)}else if(originalChild&&!updatedChild){originalChild.remove()}else if(originalChild&&updatedChild){if(originalChild.nodeType===Node.TEXT_NODE&&updatedChild.nodeType===Node.TEXT_NODE){if(originalChild.textContent.replaceAll(/\s/g,"")!==updatedChild.textContent.replaceAll(/\s/g,"")){log(uuid,"Reemplazando texto",originalChild.textContent,updatedChild.textContent);originalChild.textContent=updatedChild.textContent}}else{if(originalChild.tagName===updatedChild.tagName){for(let attr of originalChild.attributes){if(attr.name==UUID_ATTRIBUTE)continue;if(updatedChild.hasAttribute(attr.name))continue;originalChild.removeAttribute(attr.name)}
for(let attr of updatedChild.attributes){if(attr.name==UUID_ATTRIBUTE)continue;if(!originalChild.hasAttribute(attr.name)){originalChild.setAttribute(attr.name,attr.value)}else{if(originalChild.getAttribute(attr.name)!=attr.value){originalChild.setAttribute(attr.name,attr.value)}}}
updateDomChildren(originalChild,updatedChild)}else{const clonedNode=updatedChild.cloneNode(!0);log(uuid,"Reemplazando elemento",originalChild,clonedNode);container.replaceChild(clonedNode,originalChild)}}}}}
const apply=function(){if(!container)return;c._render_times++;const clone=container.cloneNode(!0);clone.innerHTML=render.bind(c)();updateDomChildren(container,clone);container.querySelectorAll("*[model]").forEach((el)=>{const modelName=el.getAttribute("model");const spl=modelName.split(".");let value=c;for(let item of spl){if(!value)continue;value=value[item]}
if(value)el.value=value;el.addEventListener("input",()=>{let currentValue=c;for(let i=0;i<spl.length-1;i++){currentValue=currentValue[spl[i]]}
currentValue[spl[spl.length-1]]=el.value})});for(const htmlEvent of["onclick","ondblclick","onmousedown","onmousemove","onmouseout","onmouseover","onmouseup","onkeydown","onkeypress","onkeyup","onabort","onbeforeunload","onerror","onload","onresize","onscroll","onunload","onblur","onchange","onfocus","onreset","onselect","onsubmit","oncontextmenu","oninput","oninvalid","onsearch","ondrag","ondragend","ondragenter","ondragleave","ondragover","ondragstart","ondrop","oncopy","oncut","onpaste","onwheel","ontouchcancel","ontouchend","ontouchmove","ontouchstart"]){container.querySelectorAll(`*[${htmlEvent}]`).forEach((el)=>{const clickEventName=el.getAttribute(htmlEvent);const function_name=clickEventName.split("(")[0];const func=c[function_name];if(typeof func==="function"){el[htmlEvent]=function(event){event.preventDefault();let params={event};if(clickEventName.split("(").length>0){if(clickEventName.split("(")[1]){if(clickEventName.split("(")[1].split(")")[0]){const p=clickEventName.split("(")[1].split(")")[0].split(",");params={};for(let i=0;i<p.length;i++){if(c[p[i]]){params[i]=c[p[i]]}else{params[i]=eval(p[i])}}
params[p.length]=event}}}
setTimeout(()=>func.apply(c,Object.values(params)),0)}}})}
container.querySelectorAll("slot").forEach((element)=>{for(let child of children)element.appendChild(child)});container.querySelectorAll("*").forEach((element)=>{if(!components[element.tagName.toUpperCase()])return;if(element.hasAttribute(UUID_ATTRIBUTE))return;c.children.push(components[element.tagName.toUpperCase()].render(element,getChildren(element)))});if(postRender)setTimeout(postRender.bind(c),100);container.dispatchEvent(new Event("change"));setTimeout(initFadeIn);return container.innerHTML};const c=controller?new controller():new(function(){})();c.children=[];c._render_times=0;for(let name of container.getAttributeNames()){c[name]=container.getAttribute(name)}
container.setAttribute(UUID_ATTRIBUTE,uuid);c.apply=apply;apply();container.dispatchEvent(new Event("load"));return c}})();if(tagName)components[tagName.toUpperCase()]=c;return c}
export function Modal({controller,render,hideWhenClickOverlay,className,referrer},params={},events={}){const MODAL_STYLE={OVERLAY:"position: fixed; top: 0; left: 0; width: 100%; height: 100%; z-index: 999999999",MODAL:"position: fixed; top: 50%; left: 50%; border-radius: 0.25rem; min-width: 20rem; max-width: calc(100% - 2rem); transform: translate(-50%, -50%); background-color: white; color: black; transition: opacity 0.3s, transform 0.3s; z-index: 999999999",};const component=Component({controller,render});const modal=document.createElement("div");modal.setAttribute("style",MODAL_STYLE.MODAL);if(referrer){const pos=referrer.getBoundingClientRect();modal.style.top=`${pos.top + pos.height + 1}px`;modal.style.left=`${pos.left + pos.width + 1}px`;modal.style.transform=""}else{modal.style.opacity=0;modal.style.transform="translate(-50%, 65%)"}
modal.classList.add("modal");if(className)modal.classList.add(className);const close=function(...attr){if(events.onClose)events.onClose(...attr);if(!referrer){modal.style.opacity=0;modal.style.transform="translate(-50%, 65%)";setTimeout(()=>{overlay.remove();modal.remove()},300)}else{overlay.remove();modal.remove()}};const componentInstance=component.render(modal);Object.assign(componentInstance,params);componentInstance.apply();componentInstance.close=close;const overlay=document.createElement("div");overlay.setAttribute("style",MODAL_STYLE.OVERLAY);overlay.classList.add("overlay");if(referrer)overlay.style.opacity=0;document.body.appendChild(overlay);document.body.appendChild(modal);if(!referrer){setTimeout(()=>{modal.style.opacity=1;modal.style.transform="translate(-50%, -50%)"},50)}
if(hideWhenClickOverlay){overlay.onclick=close}}
export function Router(routes=[],params={}){if(params.useHash==undefined)params.useHash=!0;const matchDynamicRoute=function(routePattern,path){const patternSegments=routePattern.split("/");const pathSegments=path.split("/");if(patternSegments.length!==pathSegments.length)return null;let params={};for(let i=0;i<patternSegments.length;i++){const pattern=patternSegments[i];const value=pathSegments[i];if(pattern.startsWith(":")){const paramName=pattern.slice(1);params[paramName]=value}else if(pattern!==value){return null}}
return{params}};const destroyRecursive=function(controller){if(controller.onDestroy)controller.onDestroy();for(let child of controller.children){destroyRecursive(child)}};return new(function Router(){this.params=undefined;this.alias=undefined;this.path=undefined;this.body=undefined;this.current_component=undefined;this.listeners={};this.navigate=(path,body=null)=>{if(params.useHash)path=`#${path}`;history.pushState({urlPath:`${path}`},"",`${path}`);this.body=body;document.startViewTransition?document.startViewTransition(this.render.bind(this)):this.render()};this.listen=(callback)=>{const uuid=crypto.randomUUID?crypto.randomUUID():Math.random().toString(36).slice(2);this.listeners[uuid]=callback};this.unlisten=(uuid)=>{delete this.listeners[uuid]};this.render=function(container=null){if(container)this.container=container;if(!this.container)return;if(params.useHash){if(!location.hash)location.hash="#/";this.path=location.hash.replace("#","")}else{this.path=location.pathname}
let route=routes.find((r)=>r.path===this.path);this.params={};if(!route){for(let r of routes){const match=matchDynamicRoute(r.path,this.path);if(match){this.params=match.params;route=r;break}}}
if(!route){this.alias=params.error?(params.error.alias.startsWith(":")?this.params[params.error.alias.split(":")[1]]:params.error.alias):"404";this.current_component=Component(params.error?params.error.controller:{render:()=>"404"}).render(this.container)}else{if(this.current_component)destroyRecursive(this.current_component);if(route.middleware){route.middleware(()=>{if(route.alias){this.alias=route.alias.startsWith(":")?this.params[route.alias.split(":")[1]]:route.alias}else{this.alias=undefined}
this.current_component=Component(route.controller).render(this.container)})}else{if(route.alias){this.alias=route.alias.startsWith(":")?this.params[route.alias.split(":")[1]]:route.alias}else{this.alias=undefined}
this.current_component=Component(route.controller).render(this.container)}}
for(let listener in this.listeners)this.listeners[listener](this.params);setTimeout(initFadeIn)};window.addEventListener("popstate",(e)=>{this.render()})})()}
window.addEventListener("load",function(){document.querySelectorAll("*[autoload]").forEach((element)=>{if(element.hasAttribute(UUID_ATTRIBUTE))return;if(!components[element.tagName.toUpperCase()])return;components[element.tagName.toUpperCase()].render(element,getChildren(element))})});window.addEventListener('load',e=>{var meta=document.createElement('meta');meta.name='devetty-license';meta.content='Using the Devetty Services and the lib ScopeJS developed by @PabloTheBlink.';document.getElementsByTagName('head')[0].appendChild(meta)})